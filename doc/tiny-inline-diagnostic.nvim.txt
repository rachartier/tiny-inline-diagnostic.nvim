*tiny-inline-diagnostic.nvim.txt*For Neovim >= 0.10.0Last change: 2024 August 18

==============================================================================
Table of Contents              *tiny-inline-diagnostic.nvim-table-of-contents*

1. tiny-inline-diagnostic.nvim|tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim|
  - Images    |tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-images|
  - Setup      |tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-setup|
  - Installation|tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-installation|
  - Options  |tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-options|
  - Highlights|tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-highlights|
  - API          |tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-api|
  - FAQ:        |tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-faq:|
2. Links                                   |tiny-inline-diagnostic.nvim-links|

==============================================================================
1. tiny-inline-diagnostic.nvim*tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim*

A Neovim plugin that display prettier diagnostic messages. Display one line
diagnostic messages where the cursor is, with icons and colors.


IMAGES        *tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-images*


OVERFLOW HANDLING ENABLED ~


BREAK LINE ENABLED ~


SETUP          *tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-setup*

- You need to set `vim.diagnostic.config({ virtual_text = false })`, to not have all diagnostics in the buffer displayed.


INSTALLATION*tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-installation*


  [!NOTE] Only works with Neovim >= 0.10
With Lazy.nvim:

>lua
    {
        "rachartier/tiny-inline-diagnostic.nvim",
        event = "VeryLazy",
        config = function()
            require('tiny-inline-diagnostic').setup()
        end
    }
<


OPTIONS      *tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-options*

>lua
    -- Default configuration
    require("tiny-inline-diagnostic").setup({
        signs = {
            left = "",
            right = "",
            diag = "●",
            arrow = "    ",
            up_arrow = "    ",
            vertical = " │",
            vertical_end = " └",
        },
        hi = {
            error = "DiagnosticError",
            warn = "DiagnosticWarn",
            info = "DiagnosticInfo",
            hint = "DiagnosticHint",
            arrow = "NonText",
            background = "CursorLine", -- Can be a highlight or a hexadecimal color (#RRGGBB)
            mixing_color = "None", -- Can be None or a hexadecimal color (#RRGGBB). Used to blend the background color with the diagnostic background color with another color.
        },
        blend = {
            factor = 0.27,
        },
        options = {
            -- Show the source of the diagnostic.
            show_source = false,
    
            -- Throttle the update of the diagnostic when moving cursor, in milliseconds.
            -- You can increase it if you have performance issues.
            -- Or set it to 0 to have better visuals.
            throttle = 20,
    
            -- The minimum length of the message, otherwise it will be on a new line.
            softwrap = 15,
    
            -- If multiple diagnostics are under the cursor, display all of them.
            multiple_diag_under_cursor = false,
    
            -- Enable diagnostic message on all lines.
            -- /!\ Still an experimental feature, can be slow on big files.
            multilines = false,
    
            overflow = {
                -- Manage the overflow of the message.
                --    - wrap: when the message is too long, it is then displayed on multiple lines.
                --    - none: the message will not be truncated.
                --    - oneline: message will be displayed entirely on one line.
                mode = "wrap",
            },
    
            -- Format the diagnostic message.
            -- Example:
            -- format = function(diagnostic)
            --     return diagnostic.message .. " [" .. diagnostic.source .. "]"
            -- end,
            format = nil,
    
            --- Enable it if you want to always have message with `after` characters length.
            break_line = {
                enabled = false,
                after = 30,
            },
    
            virt_texts = {
                priority = 2048,
            },
        },
    })
<


HIGHLIGHTS*tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-highlights*

- TinyInlineDiagnosticVirtualTextError
- TinyInlineDiagnosticVirtualTextWarn
- TinyInlineDiagnosticVirtualTextInfo
- TinyInlineDiagnosticVirtualTextHint
- TinyInlineDiagnosticVirtualTextArrow

`Inv` is used for left and right signs. -
TinyInlineInvDiagnosticVirtualTextError -
TinyInlineInvDiagnosticVirtualTextWarn - TinyInlineInvDiagnosticVirtualTextInfo
- TinyInlineInvDiagnosticVirtualTextHint


API              *tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-api*

- `require("tiny-inline-diagnostic").change(blend, highlights)`change the colors of the diagnostic. You need to refer to `setup` to see the structure of the `blend` and `highlights` options.
- `require("tiny-inline-diagnostic").get_diagnostic_under_cursor(bufnr)`get the diagnostic under the cursor, useful if you want to display the diagnostic in a statusline.
- `require("tiny-inline-diagnostic").enable()`enable the diagnostic.
- `require("tiny-inline-diagnostic").disable()`disable the diagnostic.
- `require("tiny-inline-diagnostic").toggle()`toggle the diagnostic, on/off.


FAQ:            *tiny-inline-diagnostic.nvim-tiny-inline-diagnostic.nvim-faq:*

- **Q**My colors are bad
    - You can change the colors with the `hi` option.
    - If you have no background color, you should try to set `blend.mixing_color` to a color that will blend with the background color.
- **Q**All diagnostics are still displayed
    - You need to set `vim.diagnostic.config({ virtual_text = false })` to remove all the others diagnostics.
- **Q**Diagnostics are not readable on a light background
    - You can either set `vim.g.background = "light"` to use white diagnostics background. Will not work if `hi.mixing_color` is set
- **Q**`GitBlame` (or other) is displayed first
    - You need to modify the `virt_texts.priority` option to a higher value.

==============================================================================
2. Links                                   *tiny-inline-diagnostic.nvim-links*

1. *tinyinlinediagnostic_2*: https://github.com/rachartier/tiny-inline-diagnostic.nvim/assets/2057541/d0033fe8-1ac3-416b-92a6-96aa49472cc9
2. *tinyinlinediagnostic_wrap*: https://github.com/rachartier/tiny-inline-diagnostic.nvim/assets/2057541/799fd09f-ba7a-4881-825b-8068af8c53bb
3. *image*: https://github.com/rachartier/tiny-inline-diagnostic.nvim/assets/2057541/3d632c8f-6080-4929-8c6e-c747527a9eea

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
